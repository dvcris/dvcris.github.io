{"version":3,"sources":["commons/components/RootRouter.tsx","commons/components/TopLevelLayout/index.tsx","commons/utils/fallback.ts","commons/components/Button/index.tsx","commons/components/Icon/index.tsx","commons/effects/useDevice.ts","commons/index.ts","not-found/index.tsx","routes.tsx","catalog/index.ts","Main.tsx","registerServiceWorker.js","index.tsx"],"names":["RootRouter","children","element","path","TopLevelLayout","fallback","className","fallbackHandler","event","preventDefault","alert","Button","type","text","icon","onClick","Icon","alt","src","useDevice","useState","window","innerWidth","width","setWidth","handler","useEffect","addEventListener","removeEventListener","isxs","issm","ismd","islg","component","lazy","HomePage","NotFound","nfound","Routes","index","Main","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9aac230c.chunk.js","sourcesContent":["import React from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n\ntype Props = { children: React.ReactElement[], element: React.ReactElement };\n\nexport const RootRouter: React.FC<Props> = ({ children, element }) => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={element}>\n          {children}\n        </Route>\n      </Routes>\n    </Router>\n  );\n};\n\nexport { RootRouter as default };\n","import React, { Suspense } from \"react\";\nimport { Outlet } from \"react-router-dom\";\nimport './styles.scss'\n\nexport const TopLevelLayout = () => {\n  return (\n    <Suspense fallback={<div>...fame</div>}>\n      <div className=\"layout\">\n        <Outlet />\n      </div>\n    </Suspense>\n  );\n};\n\nexport { TopLevelLayout as default };\n","import { EventHandler } from \"react\";\n\nexport const fallbackHandler: EventHandler<any> = (event: Event) => {\n  event.preventDefault();\n  alert(\":( Sorry still a TODO\\nIt was not part of the assigment\");\n};\n\nexport { fallbackHandler as default };\n","import React from 'react';\nimport { fallbackHandler } from '../../utils';\nimport './styles.scss';\n\ntype Props = { text: string, type: \"primary\" | \"secondary\", icon?: React.ReactNode };\n\nexport const Button: React.FC<Props> = ({ type, text, icon }) => {\n  return (\n    <button className={`btn btn-${type}`} onClick={fallbackHandler}>\n      {icon}\n      <span className={`text text-${type}`}>{text}</span>\n    </button>\n  );\n}\n\nexport { Button as default };\n","import React from \"react\";\nimport './styles.scss';\n\ntype Props = { icon: string };\n\nexport const Icon: React.FC<Props> = ({ icon }) => {\n  return <img alt=\"icon\" className=\"icon\" src={icon} />;\n}\n\nexport { Icon as default };\n","import { useEffect, useState } from \"react\";\n\nexport const useDevice = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n  const handler = () => setWidth(window.innerWidth);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handler);\n\n    return () => {\n      window.removeEventListener(\"resize\", handler);\n    };\n  }, []);\n\n  return {\n    isxs: width <= 480,\n    issm: width > 480 && width <= 768,\n    ismd: width > 768 && width <= 1080,\n    islg: width > 1080,\n  };\n};\n\nexport { useDevice as default };\n","export { RootRouter, TopLevelLayout, Button, Icon } from \"./components\";\nexport { useDevice } from \"./effects\";\nexport { fallbackHandler } from \"./utils\";\n","import { lazy } from \"react\";\n\nconst component: LazyComponent = () =>\n  lazy(() => import(\"./page\"));\n\nexport default component;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { RootRouter, TopLevelLayout } from './commons';\nimport home from \"./catalog\";\nimport nfound from \"./not-found\";\n\nconst HomePage = home();\nconst NotFound = nfound();\n\nconst Routes = () => {\n  return (\n    <RootRouter element={<TopLevelLayout />}>\n      <Route index element={<HomePage />} />\n      <Route path=\"/home\" element={<HomePage />} />\n      <Route path=\"*\" element={<NotFound />} />\n    </RootRouter>\n  );\n};\n\nexport default Routes;\n","import { lazy } from \"react\";\n\nexport const component: LazyComponent = () =>\n  lazy(() => import(\"./page\"));\n\nexport { component as default };\n","import React from \"react\";\nimport Routes from \"./routes\";\n\nconst Main = () => <Routes />;\n\nexport default Main;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './Main';\nimport registerServiceWorker from './registerServiceWorker';\n\nimport './commons/global.scss';\n\nReactDOM.render(<Main />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}